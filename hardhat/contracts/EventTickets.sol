//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/Base64.sol";

contract EventTickets is ERC721URIStorage {
  using Strings for uint256;
  using Counters for Counters.Counter;

  struct Event {
    address owner;
    bytes32 id;
    uint256 price;
    uint256 income;
    string name;
    string dateTime;
  }

  event EventCreated();
  event IncomeWithdrawn();
  event TicketMinted();

  mapping (address=>bytes32[]) userEventIDs;
  mapping (bytes32=>Event) eventDetailsById;

  Event[] private _events;
  Counters.Counter private _eventCount;
  Counters.Counter private _tokenIds;

  constructor() ERC721 ("Event Tickets", "ETS") {}

  function createEvent(string memory _name, string memory _dateTime, uint256 _price) public {
    require(bytes(_name).length > 0, "Name not set");
    require(bytes(_dateTime).length > 0, "Datetime not set");
    require(_price >= 0, "Invalid price");

    bytes32 eventID = keccak256(abi.encode(msg.sender, _eventCount.current()));
    _eventCount.increment();

    Event memory newEvent = Event(msg.sender, eventID, _price, 0, _name, _dateTime);
    userEventIDs[msg.sender].push(eventID);
    eventDetailsById[eventID] = newEvent;
    _events.push(newEvent);
    emit EventCreated();
  }

  function withdraw(bytes32 _eventID) payable public {
    Event memory foundEvent = eventDetailsById[_eventID];
    require(msg.sender == foundEvent.owner, "You are not the owner of this event");
    require(foundEvent.income > 0, "This event has no income or it has already been withdrawn");

    (bool success, ) = payable(msg.sender).call{value: foundEvent.income}("");
    require(success, "Withdraw transaction failed");

    eventDetailsById[_eventID].income = 0;
    emit IncomeWithdrawn();
  }

  function mint(bytes32 _eventID, uint256 _amount) public payable {
    require(_eventID.length > 0, "Event ID not defined");
    require(msg.value == _amount, "Invalid amount");

    Event memory foundEvent = eventDetailsById[_eventID];
    require(bytes(foundEvent.name).length > 0, "Event not found");
    require(_amount > 0 && _amount == foundEvent.price, "Paid amount does not match with event price");

    eventDetailsById[_eventID].price += _amount;
    _tokenIds.increment();
    uint256 newItemId = _tokenIds.current();
    _safeMint(msg.sender, newItemId);
    string memory tokenURI = getTokenURI(foundEvent.name, newItemId, msg.sender);
    _setTokenURI(newItemId, tokenURI);
    emit TicketMinted();
}

  function generateTicket(string memory _eventName, uint256 _tokenId) public pure returns (string memory) {
    bytes memory svg = abi.encodePacked(
        '<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMinYMin meet" viewBox="0 0 350 350">',
        '<style>.base { fill: white; font-family: serif; font-size: 14px; }</style>',
        '<rect width="100%" height="100%" fill="black" />',
        '<text x="50%" y="40%" class="base" dominant-baseline="middle" text-anchor="middle">', "Event: ",_eventName,'</text>',
        '<text x="50%" y="50%" class="base" dominant-baseline="middle" text-anchor="middle">', "Ticket: ",_tokenId.toString(),'</text>',
        '</svg>'
    );

    return string(
        abi.encodePacked(
            "data:image/svg+xml;base64,",
            Base64.encode(svg)
        )    
    );
  }

  function getTokenURI(string memory _eventName, uint256 _tokenId, address _owner) public pure returns (string memory){
    bytes memory dataURI = abi.encodePacked(
        '{',
            '"name": "',_eventName,' - ',_tokenId.toString(),'",',
            '"description": "Ticket for an event generated by EventTickets contract",',
            '"image": "',generateTicket(_eventName, _tokenId),'",',
            '"attributes": [',
              '{',
                '"trait_type": "Token ID",',
                '"value": "',_tokenId.toString(),'"',
              '},',
              '{',
                '"trait_type": "Ticket owner",',
                '"value": "',Strings.toHexString(uint160(_owner), 20),'"',
              '}',
            ']',
        '}'
    );
    return string(
        abi.encodePacked(
            "data:application/json;base64,",
            Base64.encode(dataURI)
        )
    );
}

  function getEvents() public view returns (Event[] memory) {
    return _events;
  }
}
